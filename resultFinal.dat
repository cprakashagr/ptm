package
ptm;
import
java.io.BufferedWriter;
java.io.DataOutputStream;
java.io.File;
java.io.FileInputStream;
java.io.FileNotFoundException;
java.io.FileOutputStream;
java.io.FileWriter;
java.io.IOException;
java.io.PrintWriter;
java.util.Scanner;
java.util.regex.Pattern;
public
class
PtmAlgo
{
private
FileInputStream
fis;
FileOutputStream
fos;
File
sofile;
tFile;
stFile;
String[]
stopWordsList;
int
newNum;
originalLength=0;
PtmAlgo()
}
PtmAlgo(String
sourceFile,
String
stopFile,
pattern)
/*
*
Steps:
1.
Copy
the
to
local
folder.
2.
Do
Pre
Processing;
Use
Delimiters.
3.
Stop
Words.
{,
}.
4.
Stemming
5.
Redundancy
Removal
*/
//
Copying
Source
sofile
=
new
(sourceFile);
stFile
File(stopFile);
tFile
("SourceFile.dat");
data
0;
try
fis
FileInputStream(sofile);
fos
FileOutputStream(tFile);
while
(data
!=
-1)
data=fis.read();
fos.write(data);
catch
(FileNotFoundException
e)
e.printStackTrace();
(IOException
processing.
countOriginal();
if
(!stopFile.isEmpty())
fetchStopWords();
removeStopWords();
stemSteps();
removeRedundancy();
void
fetchStopWords()
i
Scanner
sc;
word;
sc
Scanner(stFile);
(sc.hasNext())
i++;
sc.next();
System.gc();
stopWordsList
String[i];
i=0;
word
stopWordsList[i++]
removeStopWords()
DataOutputStream
outFileStop;
outFile;
Scanner(sofile);
sc.useDelimiter(Pattern.compile("[
\n\r\t,.;:?!(){}'\"]+"));
outFileStop
DataOutputStream(new
FileOutputStream(new
File("WithStop.dat")));
outFile
File("WithoutStop.dat")));
(isStopWord(word))
outFileStop.writeChars(word+"\n");
else
outFile.writeChars(word+"\n");
outFileStop.close();
outFile.close();
boolean
isStopWord(String
word)
len
stopWordsList.length;
for
(i=0;i<len;i++)
(stopWordsList[i].equals(word))
return
true;
false;
getTimeWithoutPTM()
originalLength;
getTimeWithPTM()
stemSteps()
char[]
w
char[501];
s
Stemming();
in
FileInputStream("WithoutStop.dat");
file
File("result1.txt");
(!file.exists())
file.createNewFile();
ex)
PrintWriter
out
PrintWriter(new
BufferedWriter(new
FileWriter("result1.txt",
true)));
while(true)
ch
in.read();
(Character.isLetter((char)
ch))
j
Character.toLowerCase((char)
ch);
w[j]
(char)
ch;
(j
<
500)
j++;
(!Character.isLetter((char)
(int
c
j;
c++)
s.add(w[c]);
s.stem();
u;
u
s.toString();
out.println(u);
out.close();
(Exception
break;
(ch
0)
countOriginal()
originalLength++;
removeRedundancy()
i=originalLength;
print;
File("resultFinal.dat");
System.out.println(sofile);
(isRedundant(word))
i--;
System.out.println("Redun
"
+
word);
System.out.println("Non
Redun
print
FileOutputStream(outFile,
true));
print.println(word);
print.close();
sc.close();
newNum
i;
isRedundant(String
prevWord;
nFile
Scanner(nFile);
prevWord
(prevWord.equals(word))
